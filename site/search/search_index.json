{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Hands-on digital grammaticography","text":"<p>This is a guide with specific steps on how to create a digital grammar. The proposed method uses the CLDF/CLLD ecosystem to combine a linguistic database with a document written in markdown. It uses software specifically developed for this approach, as well as a set of CLDF components. As such, it is opinionated in its choice of tools; however, the formatted output is customizable. In principle, the same method could be applied to other types of linguistic databases, provided that tooling for integrating data into schematic templates is available for these databases.<sup>1</sup></p>"},{"location":"index.html#next-steps","title":"Next steps","text":"<ol> <li>make sure you have the necessary setup</li> <li>acquire a CLDF dataset</li> <li>write a description</li> </ol>"},{"location":"index.html#problems","title":"Problems?","text":"<ol> <li>please check first if your case is covered in the common problems</li> <li>if it's clear that the error comes from one of the used python packages, click the respective link (cldflex, unboxer, pylingdocs, indicogram) to create an issue</li> <li>describe your issue here</li> </ol> <ol> <li> <p>If you are interested in using a specific database format, get in touch.\u00a0\u21a9</p> </li> </ol>"},{"location":"data.html","title":"Creating a CLDF dataset","text":"<p>CLDF is a lightweight, human-readable format for linguistic data, using linked data in CSV files. The <code>cldfviz</code> library offers the possibility to intersperse markdown with data. cldf-ldd is a set of cldf components designed to encode fieldwork data, used by both conversion libraries below.</p> <ul> <li>if you have a FLEx database, click here</li> <li>if you have a shoebox or toolbox database, click here</li> <li>if you don't have a database, the <code>cldflex</code> repo contains example flextext and lift files that you can use.</li> <li>you can also use some other existing CLDF dataset to go through the workflow</li> </ul>"},{"location":"data.html#flex","title":"FLEx","text":"<p>The cldflex library can be used to convert FLEx databases into CSV files (and from there into CLDF datasets, if desired). To get your corpus &amp; lexicon ready for grammar writing, follow these steps:</p> <ol> <li>export your FLEx text database as <code>.flextext</code>: Navigate to <code>Text &amp; Words &gt; Interlinear Texts</code>, open the <code>Analyzed</code> tab, use the menu <code>File &gt; Export Interlinear...</code> and choose the first option (\"ELAN, SayMore, FLEx\"). You can include one or multiple texts.</li> <li>export your FLEx lexicon as <code>.lift</code>: Navigate to <code>Lexicon</code>, use the menu <code>File &gt; Export...</code> and choose the option \"Full Lexicon (LIFT 0.13 XML)\".</li> <li>use <code>cldflex</code> to transform the contents of your <code>.flextext</code> and <code>.lift</code> files to a CLDF dataset: <pre><code>`cldflex flex2csv &lt;filename&gt;.flextext --lexicon &lt;filename&gt;.lift --cldf`\n</code></pre> Depending on the setup of your FLEx database, this will throw all sorts of warnings at you and complain about inconsistencies. You can fix them in your database, but things should mostly work even if you ignore them. If you think a particular warning is inaccurate, open an issue here.</li> <li>get writing</li> </ol>"},{"location":"data.html#box","title":"*box","text":"<p>The unboxer is a tool to convert shoe- and toolbox databases into CSV files (and from there into CLDF datasets, if desired). To get your corpus &amp; lexicon ready for grammar writing, follow these steps:</p> <ol> <li>identify the path to your corpus database</li> <li>identify the path to your lexicon</li> <li>(optional) identify the path to your parsing database</li> <li>run this command, inserting the paths:</li> </ol> <pre><code>unboxer corpus &lt;/path/to/corpus.db&gt; --lexicon &lt;/path/to/lexicon.db&gt; --parsing &lt;/path/to/parse.db&gt; --cldf\n</code></pre>"},{"location":"deploy.html","title":"Distributing","text":""},{"location":"deploy.html#mkdocs","title":"MkDocs","text":"<p>Pylingdocs creates output using Material for MkDocs (example). MkDocs projects can easily be deployed to github pages.</p> <ol> <li>set up a git repo in your pylingdocs project folder and synchronise with github</li> <li>navigate to the <code>mkdocs</code> output directory: <pre><code>cd output/mkdocs\n</code></pre></li> <li>deploy to github pages: <pre><code>mkdocs gh-deploy\n</code></pre></li> </ol>"},{"location":"deploy.html#clld","title":"CLLD","text":"<p>CLLD apps are not static sites, but powerful web apps (example).</p> <ol> <li> <p>download this repo and install it: <pre><code>pip install -e indicogram\n</code></pre></p> </li> <li> <p>build the <code>clld</code> database and serve it: <pre><code>cd indicogram\nclld initdb development.ini --cldf ../your-grammar/output/cldf/metadata.json\npserve --reload development.ini\n</code></pre></p> </li> <li> <p>view the app in your webbrowser at <code>localhost:6543</code></p> </li> </ol>"},{"location":"faq.html","title":"FAQ","text":""},{"location":"faq.html#common-problems","title":"Common problems","text":""},{"location":"pld.html","title":"Writing","text":"<p>pylingdocs is a markdown processor using the cldfviz library. It converts markdown into a variety of formats, provides most functionalities needed for linguistics papers, and is customizable.</p>"},{"location":"pld.html#project-setup","title":"Project setup","text":"<ol> <li> <p>create a new pylingdocs project: <pre><code>pylingdocs new\n</code></pre> You will be asked some project setup prompts; the crucial one asks for the location of of the metadata JSON file of your CLDF dataset.</p> </li> <li> <p>(optional) write stuff! (how to use pylingdocs)</p> </li> <li>create a new CLDF dataset combining data and text:</li> </ol> <pre><code>cd &lt;path/to/pld-project&gt;\npylingdocs cldf\n</code></pre>"},{"location":"start.html","title":"Getting started","text":"<p>You will need a computer, some time and focus, and maybe some coffee. Ideally, you'll also have an existing database you would like to work with.</p>"},{"location":"start.html#requirements","title":"Requirements","text":"<ul> <li>knowledge prerequisites: basic command line literacy<ul> <li>Introduction to the Command Line (book)</li> <li>tutorial by Johannes Englisch</li> </ul> </li> <li>software prerequisites:<ul> <li>a working python 3.7+ installation</li> <li>git (version control system)</li> <li>system-specific:<ul> <li>macOS: running <code>git</code> might ask you to install the Xcode Command Line Tools, do it</li> <li>Windows: ?</li> <li>Linux: you should be fine</li> </ul> </li> <li>Pandoc (2.8+) if you want to use <code>pylingdocs</code> for any output other than a CLLD app</li> </ul> </li> </ul>"},{"location":"start.html#setup","title":"Setup","text":"<p>It is recommended that you create a directory for this tutorial, and store all data and execute all commands in that directory (<code>cd /path/to/your/grammar-tutorial</code>).</p>"},{"location":"start.html#virtual-environment","title":"Virtual environment","text":"<p>If you use python, it is highly recommended that you create a virtual environment and then run all commands from this tutorial in that environment.</p> macOS &amp; LinuxWindows <ol> <li>Create virtual environment in folder <code>env</code>: <pre><code>python -m venv env\n</code></pre></li> <li>Activate environment from folder: <pre><code>source env/bin/activate\n</code></pre></li> </ol> <ol> <li>Install virtualenv: <pre><code>pip install virtualenv\n</code></pre></li> <li>Create virtual environment in folder <code>env</code>: <pre><code>virtualenv env\n</code></pre></li> <li>Activate environment from folder: <pre><code>source env/bin/activate\n</code></pre></li> </ol>"},{"location":"start.html#python-packages","title":"Python packages","text":"<p>The following packages are required for this guide:</p> <ul> <li>pylingdocs for combining dataset and markdown</li> <li>cldflex for extracting FLEx databases</li> <li>unboxer for extracting *box databases</li> </ul> <p>Install them with:</p> <pre><code>pip install pylingdocs cldflex unboxer\n</code></pre>"},{"location":"start.html#set-up-the-glottolog-catalog","title":"Set up the glottolog catalog","text":"<p>If you want to automatically recognize the language in your database, you will need to download the glottolog catalog with <code>cldfbench</code> to look up language metadata. To do so, run the following command and say <code>y</code> to installing the glottolog catalog. <code>cldfbench</code> will tell you where the catalog is stored so you can delete it if you don't want to keep it.</p> <pre><code>cldfbench catconfig\n</code></pre> <p>Alternatively, you can use <code>--corpus your_languages.csv</code> with <code>cldflex</code> or <code>unboxer</code> (minimal example for file).</p>"}]}